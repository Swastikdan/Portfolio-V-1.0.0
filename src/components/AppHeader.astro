---
import CdnLink from "./Data/CdnLink"; //Not Used in this file
import HeaderLogo from "./header/HeaderLogo.astro";
import links from "./Data/NavLinks";
import DarkModeButton from "./header/DarkModeButton.astro";
---

<header class="header sticky top-0 z-50 pb-10 mx-auto">
  <nav id="nav-bar" class="w-full absolute mx-auto px-6 md:px-12 xl:px-6 transition-all duration-200">
    <div class="flex flex-wrap items-center justify-between py-2 gap-6 md:py-4 md:gap-0 relative max-w-7xl mx-auto ">
      <input aria-hidden="true" type="checkbox" name="toggle_nav" id="toggle_nav" class="hidden peer cursor-pointer" />
      <div class="relative z-20 w-full flex justify-between lg:w-max md:px-0">
        <!-- <a href="/" class="flex space-x-2 items-center">
          <img width="40" height="40" class="w-10" src={logolink} alt="Logo" />
          <h1 class="text-xl md:text-2xl font-black text-gray-900 dark:text-white">
            Swastik Dan
          </h1>
        </a> -->

        <HeaderLogo />
        <div class="mobile-buttons flex items-center space-x-3 py-3">
          <div class="lg:hidden">
            <DarkModeButton />
          </div>
          <div class="relative flex items-center lg:hidden max-h-10">
            <label for="toggle_nav" aria-label="humburger" id="hamburger" class="relative p-6 -mr-6 cursor-pointer">
              <div aria-hidden="true" id="line"
                class="m-auto h-0.5 w-5 rounded bg-sky-900 dark:bg-gray-300 transition duration-300 cursor-pointer">
              </div>
              <div aria-hidden="true" id="line2"
                class="m-auto mt-2 h-0.5 w-5 rounded bg-sky-900 dark:bg-gray-300 transition duration-300 cursor-pointer">
              </div>
            </label>
          </div>
        </div>
      </div>
      <div aria-hidden="true"
        class="overflow-hidden fixed z-10 inset-0 h-screen w-screen bg-white/70 backdrop-blur-3xl origin-bottom scale-y-0 transition duration-500 peer-checked:origin-top peer-checked:scale-y-100 lg:hidden dark:bg-gray-900/70">
      </div>
      <div class="flex-col z-20 flex-wrap gap-6 p-8 rounded-3xl border border-gray-100 bg-white shadow-2xl shadow-gray-600/10 justify-end w-full invisible opacity-0 translate-y-1 absolute top-full left-0 transition-all duration-300 scale-95 origin-top
              lg:relative lg:scale-100 lg:peer-checked:translate-y-0 lg:translate-y-0 lg:flex lg:flex-row lg:items-center lg:gap-0 lg:p-0 lg:bg-transparent lg:w-7/12 lg:visible lg:opacity-100 lg:border-none
              peer-checked:scale-100 peer-checked:opacity-100 peer-checked:visible lg:shadow-none
              dark:shadow-none dark:lg:bg-gray-900 dark:bg-gray-800 dark:border-gray-700 items-center">
        <div class="text-gray-600 dark:text-white lg:pr-4 lg:w-auto w-full lg:pt-0 flex space-x-4 lg:items-center pr-5">
          <ul
            class="tracking-wide font-medium text-lg lg:text-md flex-col flex lg:flex-row gap-6 lg:gap-0 lg:items-center py-3">

            {
            links.map((link) => (
            <li>
              <a href={link.to} class="block md:px-4 transition-all duration-200 hover:text-sky-500">
                <span>{link.label}</span>
              </a>
            </li>
            ))
            }

            <li class="hidden lg:block">
              <DarkModeButton />
            </li>
          </ul>
          <a href="https://www.upwork.com/freelancers/~01e7de179fc6b3bab7" rel="noreferrer" target="_blank"
            class="hidden lg:flex relative h-10 w-full items-center justify-center px-4 before:absolute before:inset-0 before:rounded-3xl before:bg-sky-500 before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max">
            <span class="relative text-lg font-semibold text-white inline-flex items-center">Hire Me <svg
                class="w-4 h-4 ml-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd"
                  d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                  clip-rule="evenodd"></path>
              </svg>
            </span>
          </a>
        </div>
        <div class="mt-5 lg:mt-0">
          <a href="https://www.upwork.com/freelancers/~01e7de179fc6b3bab7" rel="noreferrer" target="_blank"
            class="lg:hidden relative flex h-12 w-full items-center justify-center px-4 before:absolute before:inset-0 before:rounded-3xl before:bg-sky-500 before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max">
            <span class="relative text-lg font-semibold text-white inline-flex items-center">Hire Me <svg
                class="w-4 h-4 ml-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd"
                  d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                  clip-rule="evenodd"></path>
              </svg>
            </span>
          </a>
        </div>
      </div>
    </div>
  </nav>
</header>

<style>
  #toggle_nav:checked~div #hamburger #line {
    @apply rotate-45 translate-y-1.5;
  }

  #toggle_nav:checked~div #hamburger #line2 {
    @apply -rotate-45 -translate-y-1;
  }
</style>

<script is:inline>
  const HSThemeAppearance = {
    init() {
      const defaultTheme = "default";
      let theme = localStorage.getItem("hs_theme") || defaultTheme;

      if (document.querySelector("html").classList.contains("dark")) return;
      this.setAppearance(theme);
    },
    _resetStylesOnLoad() {
      const $resetStyles = document.createElement("style");
      $resetStyles.innerText = `*{transition: unset !important;}`;
      $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
      document.head.appendChild($resetStyles);
      return $resetStyles;
    },
    setAppearance(theme, saveInStore = true, dispatchEvent = true) {
      const $resetStylesEl = this._resetStylesOnLoad();

      if (saveInStore) {
        localStorage.setItem("hs_theme", theme);
      }

      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }

      document.querySelector("html").classList.remove("dark");
      document.querySelector("html").classList.remove("default");
      document.querySelector("html").classList.remove("auto");

      document
        .querySelector("html")
        .classList.add(this.getOriginalAppearance());

      setTimeout(() => {
        $resetStylesEl.remove();
      });

      if (dispatchEvent) {
        window.dispatchEvent(
          new CustomEvent("on-hs-appearance-change", {
            detail: theme,
          })
        );
      }
    },
    getAppearance() {
      let theme = this.getOriginalAppearance();
      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }
      return theme;
    },
    getOriginalAppearance() {
      const defaultTheme = "default";
      return localStorage.getItem("hs_theme") || defaultTheme;
    },
  };
  HSThemeAppearance.init();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      if (HSThemeAppearance.getOriginalAppearance() === "auto") {
        HSThemeAppearance.setAppearance("auto", false);
      }
    });

  window.addEventListener("load", () => {
    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]"
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]"
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item
        )
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });
</script>